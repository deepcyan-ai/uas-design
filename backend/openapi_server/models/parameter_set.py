# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class ParameterSet(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, b_e_a=None, b_i_0=None, b_k_v=None, b_p___m=None, b_r_a=None, c_d=None, c_l=None, c_dcs=None, c_l_max=None, c=None, e_b=None, g=None, k_v=None, i_in=None, i_0=None, m_b=None, m_m=None, m_tip=None, m_total=None, m_0=None, p_in=None, p_out=None, p_out___max=None, r_p=None, r_a=None, r=None, s_w=None, t=None, tcs=None, v_f=None, v_in=None, v_l=None, v_st=None, w_a=None, n_d=None, n_p=None, n_p___ideal=None, n_s=None, p_a=None, q=None, z=None):  # noqa: E501
        """ParameterSet - a model defined in OpenAPI

        :param b_e_a: The b_e_a of this ParameterSet.  # noqa: E501
        :type b_e_a: float
        :param b_i_0: The b_i_0 of this ParameterSet.  # noqa: E501
        :type b_i_0: float
        :param b_k_v: The b_k_v of this ParameterSet.  # noqa: E501
        :type b_k_v: float
        :param b_p___m: The b_p___m of this ParameterSet.  # noqa: E501
        :type b_p___m: float
        :param b_r_a: The b_r_a of this ParameterSet.  # noqa: E501
        :type b_r_a: float
        :param c_d: The c_d of this ParameterSet.  # noqa: E501
        :type c_d: float
        :param c_l: The c_l of this ParameterSet.  # noqa: E501
        :type c_l: float
        :param c_dcs: The c_dcs of this ParameterSet.  # noqa: E501
        :type c_dcs: float
        :param c_l_max: The c_l_max of this ParameterSet.  # noqa: E501
        :type c_l_max: float
        :param c: The c of this ParameterSet.  # noqa: E501
        :type c: float
        :param e_b: The e_b of this ParameterSet.  # noqa: E501
        :type e_b: float
        :param g: The g of this ParameterSet.  # noqa: E501
        :type g: float
        :param k_v: The k_v of this ParameterSet.  # noqa: E501
        :type k_v: float
        :param i_in: The i_in of this ParameterSet.  # noqa: E501
        :type i_in: float
        :param i_0: The i_0 of this ParameterSet.  # noqa: E501
        :type i_0: float
        :param m_b: The m_b of this ParameterSet.  # noqa: E501
        :type m_b: float
        :param m_m: The m_m of this ParameterSet.  # noqa: E501
        :type m_m: float
        :param m_tip: The m_tip of this ParameterSet.  # noqa: E501
        :type m_tip: float
        :param m_total: The m_total of this ParameterSet.  # noqa: E501
        :type m_total: float
        :param m_0: The m_0 of this ParameterSet.  # noqa: E501
        :type m_0: float
        :param p_in: The p_in of this ParameterSet.  # noqa: E501
        :type p_in: float
        :param p_out: The p_out of this ParameterSet.  # noqa: E501
        :type p_out: float
        :param p_out___max: The p_out___max of this ParameterSet.  # noqa: E501
        :type p_out___max: float
        :param r_p: The r_p of this ParameterSet.  # noqa: E501
        :type r_p: float
        :param r_a: The r_a of this ParameterSet.  # noqa: E501
        :type r_a: float
        :param r: The r of this ParameterSet.  # noqa: E501
        :type r: float
        :param s_w: The s_w of this ParameterSet.  # noqa: E501
        :type s_w: float
        :param t: The t of this ParameterSet.  # noqa: E501
        :type t: float
        :param tcs: The tcs of this ParameterSet.  # noqa: E501
        :type tcs: float
        :param v_f: The v_f of this ParameterSet.  # noqa: E501
        :type v_f: float
        :param v_in: The v_in of this ParameterSet.  # noqa: E501
        :type v_in: float
        :param v_l: The v_l of this ParameterSet.  # noqa: E501
        :type v_l: float
        :param v_st: The v_st of this ParameterSet.  # noqa: E501
        :type v_st: float
        :param w_a: The w_a of this ParameterSet.  # noqa: E501
        :type w_a: float
        :param n_d: The n_d of this ParameterSet.  # noqa: E501
        :type n_d: float
        :param n_p: The n_p of this ParameterSet.  # noqa: E501
        :type n_p: float
        :param n_p___ideal: The n_p___ideal of this ParameterSet.  # noqa: E501
        :type n_p___ideal: float
        :param n_s: The n_s of this ParameterSet.  # noqa: E501
        :type n_s: float
        :param p_a: The p_a of this ParameterSet.  # noqa: E501
        :type p_a: float
        :param q: The q of this ParameterSet.  # noqa: E501
        :type q: float
        :param z: The z of this ParameterSet.  # noqa: E501
        :type z: float
        """
        self.openapi_types = {
            'b_e_a': float,
            'b_i_0': float,
            'b_k_v': float,
            'b_p___m': float,
            'b_r_a': float,
            'c_d': float,
            'c_l': float,
            'c_dcs': float,
            'c_l_max': float,
            'c': float,
            'e_b': float,
            'g': float,
            'k_v': float,
            'i_in': float,
            'i_0': float,
            'm_b': float,
            'm_m': float,
            'm_tip': float,
            'm_total': float,
            'm_0': float,
            'p_in': float,
            'p_out': float,
            'p_out___max': float,
            'r_p': float,
            'r_a': float,
            'r': float,
            's_w': float,
            't': float,
            'tcs': float,
            'v_f': float,
            'v_in': float,
            'v_l': float,
            'v_st': float,
            'w_a': float,
            'n_d': float,
            'n_p': float,
            'n_p___ideal': float,
            'n_s': float,
            'p_a': float,
            'q': float,
            'z': float
        }

        self.attribute_map = {
            'b_e_a': 'B_E_a',
            'b_i_0': 'B_I_0',
            'b_k_v': 'B_K_V',
            'b_p___m': 'B_P___M',
            'b_r_a': 'B_R_A',
            'c_d': 'C_D',
            'c_l': 'C_L',
            'c_dcs': 'C_dcs',
            'c_l_max': 'C_L_max',
            'c': 'c',
            'e_b': 'E_B',
            'g': 'g',
            'k_v': 'K_V',
            'i_in': 'I_in',
            'i_0': 'I_0',
            'm_b': 'm_B',
            'm_m': 'm_M',
            'm_tip': 'M_tip',
            'm_total': 'm_total',
            'm_0': 'm_0',
            'p_in': 'P_in',
            'p_out': 'P_out',
            'p_out___max': 'p_out___max',
            'r_p': 'R_p',
            'r_a': 'R_a',
            'r': 'r',
            's_w': 'S_w',
            't': 'T',
            'tcs': 'tcs',
            'v_f': 'V_F',
            'v_in': 'V_in',
            'v_l': 'V_l',
            'v_st': 'V_st',
            'w_a': 'W_a',
            'n_d': 'n_D',
            'n_p': 'n_P',
            'n_p___ideal': 'n_P___ideal',
            'n_s': 'n_S',
            'p_a': 'p_a',
            'q': 'Q',
            'z': 'Z'
        }

        self._b_e_a = b_e_a
        self._b_i_0 = b_i_0
        self._b_k_v = b_k_v
        self._b_p___m = b_p___m
        self._b_r_a = b_r_a
        self._c_d = c_d
        self._c_l = c_l
        self._c_dcs = c_dcs
        self._c_l_max = c_l_max
        self._c = c
        self._e_b = e_b
        self._g = g
        self._k_v = k_v
        self._i_in = i_in
        self._i_0 = i_0
        self._m_b = m_b
        self._m_m = m_m
        self._m_tip = m_tip
        self._m_total = m_total
        self._m_0 = m_0
        self._p_in = p_in
        self._p_out = p_out
        self._p_out___max = p_out___max
        self._r_p = r_p
        self._r_a = r_a
        self._r = r
        self._s_w = s_w
        self._t = t
        self._tcs = tcs
        self._v_f = v_f
        self._v_in = v_in
        self._v_l = v_l
        self._v_st = v_st
        self._w_a = w_a
        self._n_d = n_d
        self._n_p = n_p
        self._n_p___ideal = n_p___ideal
        self._n_s = n_s
        self._p_a = p_a
        self._q = q
        self._z = z

    @classmethod
    def from_dict(cls, dikt) -> 'ParameterSet':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ParameterSet of this ParameterSet.  # noqa: E501
        :rtype: ParameterSet
        """
        return util.deserialize_model(dikt, cls)

    @property
    def b_e_a(self):
        """Gets the b_e_a of this ParameterSet.

        battery_nenrgy_distribution  # noqa: E501

        :return: The b_e_a of this ParameterSet.
        :rtype: float
        """
        return self._b_e_a

    @b_e_a.setter
    def b_e_a(self, b_e_a):
        """Sets the b_e_a of this ParameterSet.

        battery_nenrgy_distribution  # noqa: E501

        :param b_e_a: The b_e_a of this ParameterSet.
        :type b_e_a: float
        """
        if b_e_a is None:
            raise ValueError("Invalid value for `b_e_a`, must not be `None`")  # noqa: E501

        self._b_e_a = b_e_a

    @property
    def b_i_0(self):
        """Gets the b_i_0 of this ParameterSet.

        no-load current parameter  # noqa: E501

        :return: The b_i_0 of this ParameterSet.
        :rtype: float
        """
        return self._b_i_0

    @b_i_0.setter
    def b_i_0(self, b_i_0):
        """Sets the b_i_0 of this ParameterSet.

        no-load current parameter  # noqa: E501

        :param b_i_0: The b_i_0 of this ParameterSet.
        :type b_i_0: float
        """
        if b_i_0 is None:
            raise ValueError("Invalid value for `b_i_0`, must not be `None`")  # noqa: E501

        self._b_i_0 = b_i_0

    @property
    def b_k_v(self):
        """Gets the b_k_v of this ParameterSet.

        motor speed-constant parameter  # noqa: E501

        :return: The b_k_v of this ParameterSet.
        :rtype: float
        """
        return self._b_k_v

    @b_k_v.setter
    def b_k_v(self, b_k_v):
        """Sets the b_k_v of this ParameterSet.

        motor speed-constant parameter  # noqa: E501

        :param b_k_v: The b_k_v of this ParameterSet.
        :type b_k_v: float
        """
        if b_k_v is None:
            raise ValueError("Invalid value for `b_k_v`, must not be `None`")  # noqa: E501

        self._b_k_v = b_k_v

    @property
    def b_p___m(self):
        """Gets the b_p___m of this ParameterSet.

        maximum power-to-mass ratio  # noqa: E501

        :return: The b_p___m of this ParameterSet.
        :rtype: float
        """
        return self._b_p___m

    @b_p___m.setter
    def b_p___m(self, b_p___m):
        """Sets the b_p___m of this ParameterSet.

        maximum power-to-mass ratio  # noqa: E501

        :param b_p___m: The b_p___m of this ParameterSet.
        :type b_p___m: float
        """
        if b_p___m is None:
            raise ValueError("Invalid value for `b_p___m`, must not be `None`")  # noqa: E501

        self._b_p___m = b_p___m

    @property
    def b_r_a(self):
        """Gets the b_r_a of this ParameterSet.

        internal-resitance parameter  # noqa: E501

        :return: The b_r_a of this ParameterSet.
        :rtype: float
        """
        return self._b_r_a

    @b_r_a.setter
    def b_r_a(self, b_r_a):
        """Sets the b_r_a of this ParameterSet.

        internal-resitance parameter  # noqa: E501

        :param b_r_a: The b_r_a of this ParameterSet.
        :type b_r_a: float
        """
        if b_r_a is None:
            raise ValueError("Invalid value for `b_r_a`, must not be `None`")  # noqa: E501

        self._b_r_a = b_r_a

    @property
    def c_d(self):
        """Gets the c_d of this ParameterSet.

        vehicles drag coefficient  # noqa: E501

        :return: The c_d of this ParameterSet.
        :rtype: float
        """
        return self._c_d

    @c_d.setter
    def c_d(self, c_d):
        """Sets the c_d of this ParameterSet.

        vehicles drag coefficient  # noqa: E501

        :param c_d: The c_d of this ParameterSet.
        :type c_d: float
        """
        if c_d is None:
            raise ValueError("Invalid value for `c_d`, must not be `None`")  # noqa: E501

        self._c_d = c_d

    @property
    def c_l(self):
        """Gets the c_l of this ParameterSet.

        vehicles lift coefficient  # noqa: E501

        :return: The c_l of this ParameterSet.
        :rtype: float
        """
        return self._c_l

    @c_l.setter
    def c_l(self, c_l):
        """Sets the c_l of this ParameterSet.

        vehicles lift coefficient  # noqa: E501

        :param c_l: The c_l of this ParameterSet.
        :type c_l: float
        """
        if c_l is None:
            raise ValueError("Invalid value for `c_l`, must not be `None`")  # noqa: E501

        self._c_l = c_l

    @property
    def c_dcs(self):
        """Gets the c_dcs of this ParameterSet.

        blade cross- sectional drag cofficient  # noqa: E501

        :return: The c_dcs of this ParameterSet.
        :rtype: float
        """
        return self._c_dcs

    @c_dcs.setter
    def c_dcs(self, c_dcs):
        """Sets the c_dcs of this ParameterSet.

        blade cross- sectional drag cofficient  # noqa: E501

        :param c_dcs: The c_dcs of this ParameterSet.
        :type c_dcs: float
        """
        if c_dcs is None:
            raise ValueError("Invalid value for `c_dcs`, must not be `None`")  # noqa: E501

        self._c_dcs = c_dcs

    @property
    def c_l_max(self):
        """Gets the c_l_max of this ParameterSet.

         vehicles max lift coefficient  # noqa: E501

        :return: The c_l_max of this ParameterSet.
        :rtype: float
        """
        return self._c_l_max

    @c_l_max.setter
    def c_l_max(self, c_l_max):
        """Sets the c_l_max of this ParameterSet.

         vehicles max lift coefficient  # noqa: E501

        :param c_l_max: The c_l_max of this ParameterSet.
        :type c_l_max: float
        """
        if c_l_max is None:
            raise ValueError("Invalid value for `c_l_max`, must not be `None`")  # noqa: E501

        self._c_l_max = c_l_max

    @property
    def c(self):
        """Gets the c of this ParameterSet.

        chord  # noqa: E501

        :return: The c of this ParameterSet.
        :rtype: float
        """
        return self._c

    @c.setter
    def c(self, c):
        """Sets the c of this ParameterSet.

        chord  # noqa: E501

        :param c: The c of this ParameterSet.
        :type c: float
        """

        self._c = c

    @property
    def e_b(self):
        """Gets the e_b of this ParameterSet.

        battery energy capacity  # noqa: E501

        :return: The e_b of this ParameterSet.
        :rtype: float
        """
        return self._e_b

    @e_b.setter
    def e_b(self, e_b):
        """Sets the e_b of this ParameterSet.

        battery energy capacity  # noqa: E501

        :param e_b: The e_b of this ParameterSet.
        :type e_b: float
        """
        if e_b is None:
            raise ValueError("Invalid value for `e_b`, must not be `None`")  # noqa: E501

        self._e_b = e_b

    @property
    def g(self):
        """Gets the g of this ParameterSet.

        gravity acceleration  # noqa: E501

        :return: The g of this ParameterSet.
        :rtype: float
        """
        return self._g

    @g.setter
    def g(self, g):
        """Sets the g of this ParameterSet.

        gravity acceleration  # noqa: E501

        :param g: The g of this ParameterSet.
        :type g: float
        """
        if g is None:
            raise ValueError("Invalid value for `g`, must not be `None`")  # noqa: E501

        self._g = g

    @property
    def k_v(self):
        """Gets the k_v of this ParameterSet.

        motor speed constant  # noqa: E501

        :return: The k_v of this ParameterSet.
        :rtype: float
        """
        return self._k_v

    @k_v.setter
    def k_v(self, k_v):
        """Sets the k_v of this ParameterSet.

        motor speed constant  # noqa: E501

        :param k_v: The k_v of this ParameterSet.
        :type k_v: float
        """
        if k_v is None:
            raise ValueError("Invalid value for `k_v`, must not be `None`")  # noqa: E501

        self._k_v = k_v

    @property
    def i_in(self):
        """Gets the i_in of this ParameterSet.

        driver input current  # noqa: E501

        :return: The i_in of this ParameterSet.
        :rtype: float
        """
        return self._i_in

    @i_in.setter
    def i_in(self, i_in):
        """Sets the i_in of this ParameterSet.

        driver input current  # noqa: E501

        :param i_in: The i_in of this ParameterSet.
        :type i_in: float
        """
        if i_in is None:
            raise ValueError("Invalid value for `i_in`, must not be `None`")  # noqa: E501

        self._i_in = i_in

    @property
    def i_0(self):
        """Gets the i_0 of this ParameterSet.

        motor no-load current  # noqa: E501

        :return: The i_0 of this ParameterSet.
        :rtype: float
        """
        return self._i_0

    @i_0.setter
    def i_0(self, i_0):
        """Sets the i_0 of this ParameterSet.

        motor no-load current  # noqa: E501

        :param i_0: The i_0 of this ParameterSet.
        :type i_0: float
        """
        if i_0 is None:
            raise ValueError("Invalid value for `i_0`, must not be `None`")  # noqa: E501

        self._i_0 = i_0

    @property
    def m_b(self):
        """Gets the m_b of this ParameterSet.

        battery-ack mass  # noqa: E501

        :return: The m_b of this ParameterSet.
        :rtype: float
        """
        return self._m_b

    @m_b.setter
    def m_b(self, m_b):
        """Sets the m_b of this ParameterSet.

        battery-ack mass  # noqa: E501

        :param m_b: The m_b of this ParameterSet.
        :type m_b: float
        """
        if m_b is None:
            raise ValueError("Invalid value for `m_b`, must not be `None`")  # noqa: E501

        self._m_b = m_b

    @property
    def m_m(self):
        """Gets the m_m of this ParameterSet.

        eletric motor mass  # noqa: E501

        :return: The m_m of this ParameterSet.
        :rtype: float
        """
        return self._m_m

    @m_m.setter
    def m_m(self, m_m):
        """Sets the m_m of this ParameterSet.

        eletric motor mass  # noqa: E501

        :param m_m: The m_m of this ParameterSet.
        :type m_m: float
        """
        if m_m is None:
            raise ValueError("Invalid value for `m_m`, must not be `None`")  # noqa: E501

        self._m_m = m_m

    @property
    def m_tip(self):
        """Gets the m_tip of this ParameterSet.

        blade tip match memeber  # noqa: E501

        :return: The m_tip of this ParameterSet.
        :rtype: float
        """
        return self._m_tip

    @m_tip.setter
    def m_tip(self, m_tip):
        """Sets the m_tip of this ParameterSet.

        blade tip match memeber  # noqa: E501

        :param m_tip: The m_tip of this ParameterSet.
        :type m_tip: float
        """
        if m_tip is None:
            raise ValueError("Invalid value for `m_tip`, must not be `None`")  # noqa: E501

        self._m_tip = m_tip

    @property
    def m_total(self):
        """Gets the m_total of this ParameterSet.

        total vehicle mass  # noqa: E501

        :return: The m_total of this ParameterSet.
        :rtype: float
        """
        return self._m_total

    @m_total.setter
    def m_total(self, m_total):
        """Sets the m_total of this ParameterSet.

        total vehicle mass  # noqa: E501

        :param m_total: The m_total of this ParameterSet.
        :type m_total: float
        """
        if m_total is None:
            raise ValueError("Invalid value for `m_total`, must not be `None`")  # noqa: E501

        self._m_total = m_total

    @property
    def m_0(self):
        """Gets the m_0 of this ParameterSet.

        vehocle mass without the propulsion system  # noqa: E501

        :return: The m_0 of this ParameterSet.
        :rtype: float
        """
        return self._m_0

    @m_0.setter
    def m_0(self, m_0):
        """Sets the m_0 of this ParameterSet.

        vehocle mass without the propulsion system  # noqa: E501

        :param m_0: The m_0 of this ParameterSet.
        :type m_0: float
        """
        if m_0 is None:
            raise ValueError("Invalid value for `m_0`, must not be `None`")  # noqa: E501

        self._m_0 = m_0

    @property
    def p_in(self):
        """Gets the p_in of this ParameterSet.

        electric system input power  # noqa: E501

        :return: The p_in of this ParameterSet.
        :rtype: float
        """
        return self._p_in

    @p_in.setter
    def p_in(self, p_in):
        """Sets the p_in of this ParameterSet.

        electric system input power  # noqa: E501

        :param p_in: The p_in of this ParameterSet.
        :type p_in: float
        """
        if p_in is None:
            raise ValueError("Invalid value for `p_in`, must not be `None`")  # noqa: E501

        self._p_in = p_in

    @property
    def p_out(self):
        """Gets the p_out of this ParameterSet.

        motor out power  # noqa: E501

        :return: The p_out of this ParameterSet.
        :rtype: float
        """
        return self._p_out

    @p_out.setter
    def p_out(self, p_out):
        """Sets the p_out of this ParameterSet.

        motor out power  # noqa: E501

        :param p_out: The p_out of this ParameterSet.
        :type p_out: float
        """
        if p_out is None:
            raise ValueError("Invalid value for `p_out`, must not be `None`")  # noqa: E501

        self._p_out = p_out

    @property
    def p_out___max(self):
        """Gets the p_out___max of this ParameterSet.

        maximum motor output power  # noqa: E501

        :return: The p_out___max of this ParameterSet.
        :rtype: float
        """
        return self._p_out___max

    @p_out___max.setter
    def p_out___max(self, p_out___max):
        """Sets the p_out___max of this ParameterSet.

        maximum motor output power  # noqa: E501

        :param p_out___max: The p_out___max of this ParameterSet.
        :type p_out___max: float
        """
        if p_out___max is None:
            raise ValueError("Invalid value for `p_out___max`, must not be `None`")  # noqa: E501

        self._p_out___max = p_out___max

    @property
    def r_p(self):
        """Gets the r_p of this ParameterSet.

        propeller radius  # noqa: E501

        :return: The r_p of this ParameterSet.
        :rtype: float
        """
        return self._r_p

    @r_p.setter
    def r_p(self, r_p):
        """Sets the r_p of this ParameterSet.

        propeller radius  # noqa: E501

        :param r_p: The r_p of this ParameterSet.
        :type r_p: float
        """
        if r_p is None:
            raise ValueError("Invalid value for `r_p`, must not be `None`")  # noqa: E501

        self._r_p = r_p

    @property
    def r_a(self):
        """Gets the r_a of this ParameterSet.

        motor ressistance  # noqa: E501

        :return: The r_a of this ParameterSet.
        :rtype: float
        """
        return self._r_a

    @r_a.setter
    def r_a(self, r_a):
        """Sets the r_a of this ParameterSet.

        motor ressistance  # noqa: E501

        :param r_a: The r_a of this ParameterSet.
        :type r_a: float
        """
        if r_a is None:
            raise ValueError("Invalid value for `r_a`, must not be `None`")  # noqa: E501

        self._r_a = r_a

    @property
    def r(self):
        """Gets the r of this ParameterSet.

        radial coordinate  # noqa: E501

        :return: The r of this ParameterSet.
        :rtype: float
        """
        return self._r

    @r.setter
    def r(self, r):
        """Sets the r of this ParameterSet.

        radial coordinate  # noqa: E501

        :param r: The r of this ParameterSet.
        :type r: float
        """
        if r is None:
            raise ValueError("Invalid value for `r`, must not be `None`")  # noqa: E501

        self._r = r

    @property
    def s_w(self):
        """Gets the s_w of this ParameterSet.

        wing area  # noqa: E501

        :return: The s_w of this ParameterSet.
        :rtype: float
        """
        return self._s_w

    @s_w.setter
    def s_w(self, s_w):
        """Sets the s_w of this ParameterSet.

        wing area  # noqa: E501

        :param s_w: The s_w of this ParameterSet.
        :type s_w: float
        """
        if s_w is None:
            raise ValueError("Invalid value for `s_w`, must not be `None`")  # noqa: E501

        self._s_w = s_w

    @property
    def t(self):
        """Gets the t of this ParameterSet.

        thrust  # noqa: E501

        :return: The t of this ParameterSet.
        :rtype: float
        """
        return self._t

    @t.setter
    def t(self, t):
        """Sets the t of this ParameterSet.

        thrust  # noqa: E501

        :param t: The t of this ParameterSet.
        :type t: float
        """
        if t is None:
            raise ValueError("Invalid value for `t`, must not be `None`")  # noqa: E501

        self._t = t

    @property
    def tcs(self):
        """Gets the tcs of this ParameterSet.

        cross sectional thickness  # noqa: E501

        :return: The tcs of this ParameterSet.
        :rtype: float
        """
        return self._tcs

    @tcs.setter
    def tcs(self, tcs):
        """Sets the tcs of this ParameterSet.

        cross sectional thickness  # noqa: E501

        :param tcs: The tcs of this ParameterSet.
        :type tcs: float
        """
        if tcs is None:
            raise ValueError("Invalid value for `tcs`, must not be `None`")  # noqa: E501

        self._tcs = tcs

    @property
    def v_f(self):
        """Gets the v_f of this ParameterSet.

        airspeed  # noqa: E501

        :return: The v_f of this ParameterSet.
        :rtype: float
        """
        return self._v_f

    @v_f.setter
    def v_f(self, v_f):
        """Sets the v_f of this ParameterSet.

        airspeed  # noqa: E501

        :param v_f: The v_f of this ParameterSet.
        :type v_f: float
        """
        if v_f is None:
            raise ValueError("Invalid value for `v_f`, must not be `None`")  # noqa: E501

        self._v_f = v_f

    @property
    def v_in(self):
        """Gets the v_in of this ParameterSet.

        driver input voltage  # noqa: E501

        :return: The v_in of this ParameterSet.
        :rtype: float
        """
        return self._v_in

    @v_in.setter
    def v_in(self, v_in):
        """Sets the v_in of this ParameterSet.

        driver input voltage  # noqa: E501

        :param v_in: The v_in of this ParameterSet.
        :type v_in: float
        """
        if v_in is None:
            raise ValueError("Invalid value for `v_in`, must not be `None`")  # noqa: E501

        self._v_in = v_in

    @property
    def v_l(self):
        """Gets the v_l of this ParameterSet.

        loitering airspeed  # noqa: E501

        :return: The v_l of this ParameterSet.
        :rtype: float
        """
        return self._v_l

    @v_l.setter
    def v_l(self, v_l):
        """Sets the v_l of this ParameterSet.

        loitering airspeed  # noqa: E501

        :param v_l: The v_l of this ParameterSet.
        :type v_l: float
        """
        if v_l is None:
            raise ValueError("Invalid value for `v_l`, must not be `None`")  # noqa: E501

        self._v_l = v_l

    @property
    def v_st(self):
        """Gets the v_st of this ParameterSet.

        stall airspeed  # noqa: E501

        :return: The v_st of this ParameterSet.
        :rtype: float
        """
        return self._v_st

    @v_st.setter
    def v_st(self, v_st):
        """Sets the v_st of this ParameterSet.

        stall airspeed  # noqa: E501

        :param v_st: The v_st of this ParameterSet.
        :type v_st: float
        """
        if v_st is None:
            raise ValueError("Invalid value for `v_st`, must not be `None`")  # noqa: E501

        self._v_st = v_st

    @property
    def w_a(self):
        """Gets the w_a of this ParameterSet.

        axial induced velocity  # noqa: E501

        :return: The w_a of this ParameterSet.
        :rtype: float
        """
        return self._w_a

    @w_a.setter
    def w_a(self, w_a):
        """Sets the w_a of this ParameterSet.

        axial induced velocity  # noqa: E501

        :param w_a: The w_a of this ParameterSet.
        :type w_a: float
        """
        if w_a is None:
            raise ValueError("Invalid value for `w_a`, must not be `None`")  # noqa: E501

        self._w_a = w_a

    @property
    def n_d(self):
        """Gets the n_d of this ParameterSet.

        driver efficiency  # noqa: E501

        :return: The n_d of this ParameterSet.
        :rtype: float
        """
        return self._n_d

    @n_d.setter
    def n_d(self, n_d):
        """Sets the n_d of this ParameterSet.

        driver efficiency  # noqa: E501

        :param n_d: The n_d of this ParameterSet.
        :type n_d: float
        """
        if n_d is None:
            raise ValueError("Invalid value for `n_d`, must not be `None`")  # noqa: E501

        self._n_d = n_d

    @property
    def n_p(self):
        """Gets the n_p of this ParameterSet.

        propeller efficiency  # noqa: E501

        :return: The n_p of this ParameterSet.
        :rtype: float
        """
        return self._n_p

    @n_p.setter
    def n_p(self, n_p):
        """Sets the n_p of this ParameterSet.

        propeller efficiency  # noqa: E501

        :param n_p: The n_p of this ParameterSet.
        :type n_p: float
        """
        if n_p is None:
            raise ValueError("Invalid value for `n_p`, must not be `None`")  # noqa: E501

        self._n_p = n_p

    @property
    def n_p___ideal(self):
        """Gets the n_p___ideal of this ParameterSet.

        ideal propeller efficiency  # noqa: E501

        :return: The n_p___ideal of this ParameterSet.
        :rtype: float
        """
        return self._n_p___ideal

    @n_p___ideal.setter
    def n_p___ideal(self, n_p___ideal):
        """Sets the n_p___ideal of this ParameterSet.

        ideal propeller efficiency  # noqa: E501

        :param n_p___ideal: The n_p___ideal of this ParameterSet.
        :type n_p___ideal: float
        """
        if n_p___ideal is None:
            raise ValueError("Invalid value for `n_p___ideal`, must not be `None`")  # noqa: E501

        self._n_p___ideal = n_p___ideal

    @property
    def n_s(self):
        """Gets the n_s of this ParameterSet.

         electric system efficiency  # noqa: E501

        :return: The n_s of this ParameterSet.
        :rtype: float
        """
        return self._n_s

    @n_s.setter
    def n_s(self, n_s):
        """Sets the n_s of this ParameterSet.

         electric system efficiency  # noqa: E501

        :param n_s: The n_s of this ParameterSet.
        :type n_s: float
        """
        if n_s is None:
            raise ValueError("Invalid value for `n_s`, must not be `None`")  # noqa: E501

        self._n_s = n_s

    @property
    def p_a(self):
        """Gets the p_a of this ParameterSet.

        air density  # noqa: E501

        :return: The p_a of this ParameterSet.
        :rtype: float
        """
        return self._p_a

    @p_a.setter
    def p_a(self, p_a):
        """Sets the p_a of this ParameterSet.

        air density  # noqa: E501

        :param p_a: The p_a of this ParameterSet.
        :type p_a: float
        """
        if p_a is None:
            raise ValueError("Invalid value for `p_a`, must not be `None`")  # noqa: E501

        self._p_a = p_a

    @property
    def q(self):
        """Gets the q of this ParameterSet.

        maximum von Mises Stress  # noqa: E501

        :return: The q of this ParameterSet.
        :rtype: float
        """
        return self._q

    @q.setter
    def q(self, q):
        """Sets the q of this ParameterSet.

        maximum von Mises Stress  # noqa: E501

        :param q: The q of this ParameterSet.
        :type q: float
        """
        if q is None:
            raise ValueError("Invalid value for `q`, must not be `None`")  # noqa: E501

        self._q = q

    @property
    def z(self):
        """Gets the z of this ParameterSet.

        rotational speed  # noqa: E501

        :return: The z of this ParameterSet.
        :rtype: float
        """
        return self._z

    @z.setter
    def z(self, z):
        """Sets the z of this ParameterSet.

        rotational speed  # noqa: E501

        :param z: The z of this ParameterSet.
        :type z: float
        """
        if z is None:
            raise ValueError("Invalid value for `z`, must not be `None`")  # noqa: E501

        self._z = z
